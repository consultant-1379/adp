const errorLog = require('../library/errorLog');

// ============================================================================================= //
/**
* [ global.adp.document.getFileFromGerrit ]
* Uses <b>[ global.request.get ]</b> to retrieve the content of external link.
* @param {String} URL A String with the URL of the document.
* It is assumed that the necessary <b>validations</b> are done before to call this function.
* @return {Object} Returns a <b>promise</b>.
* But the result will be different following the answer of <b>[ global.request.get ]</b>.<br/>
* In case of <b>success</b>, the <b>promise</b> will be <b>solved</b> with the
* <b>raw content</b> of the request.<br/><br/>
* In case of <b>404 error</b>, the <b>promise</b> will be <b>rejected</b>
* with the <b>object</b>:<br/>
* <PRE>
* {
* &nbsp;&nbsp;ok: false,
* &nbsp;&nbsp;msg: [
* &nbsp;&nbsp;&nbsp;&nbsp;"404 :: File not found :: { URL REQUESTED HERE } "
* &nbsp;&nbsp;]
* }
* </PRE>
* Others <b>errors</b> could happen. In this case, the <b>promisse</b> will be
* <b>rejected</b> with the
* error generated by the <b>[ global.request.get ]</b>.
* @author Armando Schiavon Dias [escharm]
*/
// ============================================================================================= //
global.adp.docs.list.push(__filename);
// ============================================================================================= //
module.exports = URL => new Promise((RESOLVE, REJECT) => {
  const packName = 'global.adp.document.getFileFromGerrit';
  const prepareFromBuffer = async (buffer) => {
    const content = await Buffer.from(buffer, 'base64').toString('ascii');
    return content;
  };
  const url = global.adp.document.extractPath(URL);
  const authorizationString = `Basic ${Buffer.from(global.adp.config.eadpusersPassword).toString('base64')}`;
  const headers = { Authorization: authorizationString };
  try {
    adp.echoLog('Retrieving document from Gerrit', { url }, 200, packName);
    global.request.get(
      {
        url,
        headers,
      },
      (ERR, RES, DATA) => {
        if (ERR) {
          REJECT(errorLog(
            500,
            'Failure to fetch file from Gerrit',
            { error: ERR, URL, extractedUrl: url },
            'getFileFromGerrit',
            packName,
          ));
        } else if (RES.statusCode === 200) {
          RESOLVE(prepareFromBuffer(DATA));
        } else if (RES.statusCode === 302) {
          RESOLVE(DATA);
        } else if (RES.statusCode === 401) {
          const msg = 'Failure to access the given Gerrit url';
          const errObj = errorLog(
            500,
            msg,
            { error: `Function user unauthorized access to gerrit repo ${URL}`, URL, extractedUrl: url },
            'getFileFromGerrit',
            packName,
          );
          errObj.ok = false;
          errObj.msg = msg;
          REJECT(errObj);
        } else if (RES.statusCode === 404) {
          const msg = 'No file found for the given Gerrit url';
          const errObj = errorLog(
            404,
            msg,
            { error: `Gerrit file not found for url ${URL} `, URL, extractedUrl: url },
            'getFileFromGerrit',
            packName,
          );
          errObj.ok = false;
          errObj.msg = msg;
          REJECT(errObj);
        } else {
          errorLog(
            500,
            'Failure to fetch file from Gerrit',
            { error: `Failure to fetch file from Gerrit for url ${URL} `, URL, extractedUrl: url },
            'getFileFromGerrit',
            packName,
          );
          REJECT(RES.body);
        }
      },
    );
  } catch (ERROR) {
    REJECT(errorLog(
      500,
      'Gerrit request failure',
      { error: ERROR, URL, extractedUrl: url },
      'getFileFromGerrit',
      packName,
    ));
  }
});
// ============================================================================================= //
