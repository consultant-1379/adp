// ============================================================================================= //
/**
* [ global.adp.endpoints.assembly.update ]
* Update an <b>Assembly</b> register, if the JSON object is conform the <b>Schema</b> and
* the <b>Token</b> belongs to an <b>Administrator</b> or one of the <b>Owners of the
* Assembly</b>.
* @param {String} Inline Just put the address of this endPoint.
* @param {String} Authorization as string on the header of the request.
* @param {raw} Body Add a JSON on the Raw Body of the Post request. The <b>Content</b>
* of this JSON should be a valid <b>Assembly</b>.
* @author Githu Jeeva Savy [zjeegit]
*/
// ============================================================================================= //
/**
 * @swagger
 * /assembly/{ID}:
 *    put:
 *      description: Updates a <b>Assembly</b> details, for the given assembly ID
 *                   and fields to change given in JSON object. Given JSON object should match
 *                   the <b>Schema</b> and the <b>Token</b> should belong either to a
 *                   <b>Administrator</b> or <b>Onwers</b>. ID can be given in URL "inline path" or
 *                   in JSON object as _id. Incase if ID is mentioned in URL path and JSON object,
 *                   Make sure to specify exact same ID in both place to avoid Bad request.
 *      summary: Update assembly details, ID is optional
 *      requestBody:
 *          description: "Add JSON object in Raw Body of the Post request.
 *                       The <b>Content</b> of this JSON should be a valid <b>Schema</b>."
 *          required: true
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                properties:
 *                  _id:
 *                    type: string
 *                    example: Assembly ID
 *                  name:
 *                    type: string
 *                    example: Assembly Name
 *      responses:
 *        '201':
 *          $ref: '#/components/responses/Ok'
 *        '401':
 *          $ref: '#/components/responses/Unauthorized'
 *        '403':
 *          $ref: '#/components/responses/Forbidden'
 *        '500':
 *          $ref: '#/components/responses/InternalServerError'
 *      tags:
 *        - Assembly
 *      parameters:
 *      - name: ID
 *        in: path
 *        description: Enter Assembly ID
 *        schema:
 *          type: string
 *          format: string
 */
// ============================================================================================= //
const errorLog = require('./../../../library/errorLog');
// ============================================================================================= //
module.exports = (REQ, RES) => {
  const packname = 'global.adp.endpoints.assembly.update';
  const timer = new Date();
  const newAssembly = REQ.body;
  const myAssemblyfromURL = REQ.params.id;
  /* eslint-disable no-underscore-dangle */
  /* _id is generated by CouchDB. We cannot change it! */
  const myAssemblyfromBody = newAssembly._id;
  /* eslint-disable no-underscore-dangle */
  const fromURL = !((myAssemblyfromURL === null) || (myAssemblyfromURL === undefined) || (myAssemblyfromURL === ''));
  const fromBody = !((myAssemblyfromBody === null) || (myAssemblyfromBody === undefined) || (myAssemblyfromBody === ''));
  let myAssembly = null;
  if (fromURL && fromBody) {
    if (myAssemblyfromURL !== myAssemblyfromBody) {
      return global.adp.Answers.answerWith(400, RES, timer, 'Two different _id variables. Send just one.');
    }
    myAssembly = myAssemblyfromBody;
  }
  if (fromURL && !fromBody) {
    myAssembly = myAssemblyfromURL;
  }
  if (!fromURL && fromBody) {
    myAssembly = myAssemblyfromBody;
  }
  if (myAssembly === null) {
    return global.adp.Answers.answerWith(400, RES, timer, 'Id not received.');
  }
  return global.adp.permission.canDoIt(REQ, myAssembly)
    .then(() => {
      const user = REQ.user.docs[0];
      const userOBJ = {
        signum: user.signum.trim().toLowerCase(),
        role: user.role,
      };
      return global.adp.assembly.update(myAssembly, newAssembly, userOBJ)
        .then((RETURNOBJ) => {
          const msg = `Assembly updated in ${(new Date()).getTime() - timer.getTime()}ms`;
          const obj = { assemblyId: myAssembly, user: userOBJ };
          adp.echoLog(msg, obj, 200, packname);
          return global.adp.Answers.answerWith(200, RES, timer, 'Update Successful!', RETURNOBJ);
        })
        .catch((finalResult) => {
          let errorText;
          let errorOBJ;
          switch (finalResult) {
            case 404:
              errorText = 'Error on [ adp.assembly.update ]: Assembly not found';
              errorOBJ = {
                assemblyId: myAssembly,
                user: userOBJ,
                error: finalResult,
                newAssemblyToUpdate: newAssembly,
              };
              errorLog(404, errorText, errorOBJ, 'mainFunction', packname, true);
              return global.adp.Answers.answerWith(404, RES, timer);
            case 500:
              errorText = 'Error on [ adp.assembly.update ]';
              errorOBJ = {
                assemblyId: myAssembly,
                error: finalResult,
                user: userOBJ,
                newAssemblyToUpdate: newAssembly,
              };
              errorLog(500, errorText, errorOBJ, 'mainFunction', packname, true);
              return global.adp.Answers.answerWith(500, RES, timer);
            default:
              errorText = 'Error on [ adp.assembly.update ]: Bad Request';
              errorOBJ = {
                assemblyId: myAssembly,
                error: finalResult,
                user: userOBJ,
                newAssemblyToUpdate: newAssembly,
              };
              errorLog(400, errorText, errorOBJ, 'mainFunction', packname, true);
              return global.adp.Answers.answerWith(400, RES, timer, null, finalResult);
          }
        });
    })
    .catch((error) => {
      const errorText = 'Error on [ adp.permission.canDoIt ]';
      const errorOBJ = { assemblyId: myAssembly, header: REQ.headers };
      adp.echoLog(errorText, errorOBJ, 403, packname, true);
      global.adp.Answers.answerWith(403, RES, timer, error);
    });
};
// ============================================================================================= //
