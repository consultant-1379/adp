// ============================================================================================= //
/**
* [ global.adp.endpoints.user.update ]
* Update a <b>User</b> register, if the JSON object is conform the <b>Schema</b> and
* the <b>Token</b> belongs to an <b>Administrator</b> or itself.<br/>
* You have to provide the <b>ID/Signum</b> of the target of your update. Invalid
* <b>ID</b> will result in <b>404 Errors</b>.<br/>
* You can use the <b>ID</b> inline <u>or</u> inside the <b>JSON Object</b>, as <b>_id</b>
* parameter.<br/>
* In case you provide the <b>ID</b> in two different ways, they should be the same. Or will
* result in a <b>400 Bad Request</b> error.<br/><br/>
* Be careful with <b>JSON format</b>. Sending a <b>JSON</b> with sintaxe problems will
* generate errors on <b>3PP Middleware</b>.
* @param {String} Inline Just put the address of this endPoint.
* Example: https://localhost:9999/user/<b>etesuse</b>
* @param {String} Authorization as string on the header of the request.
* Add a header variable with the name <b>Authorization</b> with the string "Bearer
* <b>TOKEN</b>".<br/>
* Don't forget the space between the word <b>Bearer</b> and the <b>token</b>.
* @param {String} Header Add "Content-Type" on Header with the value " application/json ".
* @param {raw} Body Add a JSON on the Raw Body of the Post request. The <b>Content</b>
* of this JSON should be a valid <b>User</b>.
* @return 201 - User updated successfully
* @return 202 - Request has been accepted and is under process currently
* @return 400 - Bad syntax
* @return 500 - Internal Server Error
* @group User CRUD
* @route PUT /user
* @author Armando Schiavon Dias [escharm]
*/
// ============================================================================================= //
global.adp.docs.rest.push(__filename);
// ============================================================================================= //
module.exports = async (REQ, RES) => {
  const timer = new Date();
  const newUser = REQ.body;
  const myUSERfromURL = REQ.params.id;
  /* eslint-disable no-underscore-dangle */
  /* _id is generated by CouchDB. We cannot change it! */
  const myUSERfromBody = newUser._id;
  /* eslint-disable no-underscore-dangle */
  const fromURL = !((myUSERfromURL === null) || (myUSERfromURL === undefined) || (myUSERfromURL === ''));
  const fromBody = !((myUSERfromBody === null) || (myUSERfromBody === undefined) || (myUSERfromBody === ''));
  let myUSER = null;
  if (fromURL && fromBody) {
    if (myUSERfromURL !== myUSERfromBody) {
      return global.adp.Answers.answerWith(400, RES, timer, 'Two different _id variables. Send just one.');
    }
    myUSER = myUSERfromBody;
  }
  if (fromURL && !fromBody) {
    myUSER = myUSERfromURL;
  }
  if (!fromURL && fromBody) {
    myUSER = myUSERfromBody;
  }
  if (myUSER === null) {
    return global.adp.Answers.answerWith(400, RES, timer, 'ID not received');
  }
  await global.adp.permission.canDoItUser(REQ, newUser)
    .then(async () => {
      const user = REQ.user.docs[0];
      const userOBJ = {
        signum: user.signum.trim().toLowerCase(),
        role: user.role,
      };
      const finalResult = await global.adp.user.update(myUSER, newUser, userOBJ);
      switch (finalResult) {
        case 200:
          return global.adp.Answers.answerWith(200, RES, timer, '', [newUser]);
        case 404:
          return global.adp.Answers.answerWith(404, RES, timer);
        case 500:
          return global.adp.Answers.answerWith(500, RES, timer);
        default:
          return global.adp.Answers.answerWith(400, RES, timer, null, finalResult);
      }
    })
    .catch(error => global.adp.Answers.answerWith(403, RES, timer, error));
  return true;
};
// ============================================================================================= //
