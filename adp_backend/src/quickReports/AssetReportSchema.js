/**
* The Assset Report heading schema generator
* [ global.adp.quickReports.AssetReportSchema ]
* @author Cein-Sven Da Costa [edaccei]
*/
global.adp.docs.list.push(__filename);

class AssetReportSchema {
  constructor() {
    this.packName = 'global.adp.quickReports.AssetReportSchema';
    this.headers = {
      heading_overview: {},
      heading_documentation: {
        service_name: 'Service Name',
        version: 'Version',
        category: 'Category',
        name: 'Document Name',
        url: 'URL',
        restricted: 'Restricted',
        default: 'Default',
        menu_auto: 'Documentation Mode',
        repo_urls_development: 'Development Repository Link',
        repo_urls_release: 'Release Repository Link',
        isCpiUpdated: 'Is CPI Updated',
      },
      heading_compliance: {
        service_name: 'Service Name',
        group: 'Group',
        name: 'Name',
        description: 'Description',
        status: 'Status',
        comment: 'Comment',
      },
      heading_team: {
        service_name: 'Service Name',
        name: 'Full Name',
        email: 'Email Address',
        signum: 'Signum',
        team_role: 'Team Role',
        serviceOwner: 'Service Owner',
      },
      heading_additional_information: {
        service_name: 'Service Name',
        category: 'Category',
        title: 'Title',
        link: 'Link',
      },
      heading_contributors: {
        service_name: 'Service Name',
        user_name: 'Author',
        user_email: 'Email',
        organisation: 'Organisation',
        ou: 'OU',
        commits: 'Commits',
        insertions: 'Additions',
        deletions: 'Deletions',
        from_date: 'From Date',
        to_date: 'To Date',
      },
    };
  }

  /**
   * Fetches the headers for the report from the schema and from the
   * Default object in the constructor
   * @returns {promise} the headers object generated by the schema
   * and the detail object
   * @author Cein
   */
  getAllReportHeadings() {
    return new Promise((resolve, reject) => {
      global.adp.notification.buildMailSchema({})
        .then((sortedMailSchema) => {
          if (sortedMailSchema.mailSchema) {
            sortedMailSchema.mailSchema.forEach((msSchemaObj) => {
              if (typeof msSchemaObj.report === 'string') {
                const headingType = msSchemaObj.report;
                const headingToSet = `${headingType}SetHeader`;
                if (typeof this[headingToSet] !== 'undefined') {
                  this[headingToSet](msSchemaObj);
                }
              }
            });
          }
          resolve(this.headers);
        }).catch((errorBuildingMailSchema) => {
          const errorText = 'Error in [ adp.notification.buildMailSchema ] at [ getAllReportHeadings ]';
          adp.echoLog(errorText, { error: errorBuildingMailSchema }, 500, this.packName, true);
          reject(errorBuildingMailSchema);
        });
    });
  }

  /**
   * Sets the overview headings object
   * @param {object} schemaObj the schema object generated by the buildMailSchema()
   * for objects labelled report overview
   * @author Cein
   */
  overviewSetHeader(schemaObj) {
    const fieldName = schemaObj.field_name;
    const mailName = schemaObj.mail_name;
    if (typeof fieldName === 'string' && typeof mailName === 'string') {
      this.headers.heading_overview[fieldName] = mailName;
      if (fieldName === 'name') {
        this.headers.heading_documentation.service_name = mailName;
        this.headers.heading_compliance.service_name = mailName;
        this.headers.heading_team.service_name = mailName;
        this.headers.heading_additional_information.service_name = mailName;
      }
    }
  }

  /**
   * Sets the documentation headings object
   * @param {object} schemaObj the schema object generated by the buildMailSchema()
   * for objects labelled report documentation
   * @author Cein
   */
  documentationSetHeader(schemaObj) {
    const fieldName = schemaObj.field_name;
    const mailName = schemaObj.mail_name;
    if (typeof fieldName === 'string' && typeof mailName === 'string') {
      if (fieldName === 'repo_urls') {
        schemaObj.properties.forEach((docSchemaObj) => {
          const propFieldName = docSchemaObj.field_name;
          const propMailName = docSchemaObj.mail_name;
          if (propFieldName && propMailName && (propFieldName === 'development' || propFieldName === 'release')) {
            this.headers.heading_documentation[`${fieldName}_${propFieldName}`] = propMailName;
          }
        });
      } else if (schemaObj.properties) {
        this.headers.heading_documentation[fieldName] = mailName;
      }
    }
  }

  /**
   * Sets the compliance headings object
   * @param {object} schemaObj the schema object generated by the buildMailSchema()
   * for objects labelled report compliance
   * @author Cein
   */
  complianceSetHeader(schemaObj) {
    const compItems = schemaObj.items;
    if (compItems && compItems.length) {
      compItems.forEach((compItemlvl1) => {
        const fieldNamelvl1 = compItemlvl1.fieldName;
        const mailNamelvl1 = compItemlvl1.mailName;
        if (fieldNamelvl1 && mailNamelvl1 && compItemlvl1.fieldName === 'fields') {
          this.headers.heading_compliance[fieldNamelvl1] = mailNamelvl1;
        }
      });
    }
  }

  /**
   * Sets the team headings object
   * @param {object} schemaObj the schema object generated by the buildMailSchema()
   * for objects labelled report team
   * @author Cein
   */
  teamSetHeader(schemaObj) {
    const teamItems = schemaObj.items;
    if (teamItems && teamItems.length) {
      teamItems.forEach((teamItem) => {
        const fieldName = teamItem.field_name;
        const mailName = teamItem.mail_name;
        if (typeof fieldName === 'string' && typeof mailName === 'string') {
          this.headers.heading_team[fieldName] = mailName;
        }
      });
    }
  }

  /**
   * Sets the Additional Information headings object
   * @param {object} schemaObj the schema object generated by the buildMailSchema()
   * for objects labelled report additional_information
   * @author ravikiran [zgarsri]
   */
  additionalInformationSetHeader(schemaObj) {
    const addInfoItems = schemaObj.items;
    if (addInfoItems && addInfoItems.length) {
      addInfoItems.forEach((addInfoItem) => {
        const fieldName = addInfoItem.field_name;
        const mailName = addInfoItem.mail_name;
        if (typeof fieldName === 'string' && typeof mailName === 'string') {
          this.headers.heading_additional_information[fieldName] = mailName;
        }
      });
    }
  }

  /**
   * Sets the contributors headings object
   * @param {object} schemaObj the schema object generated by the buildMailSchema()
   * for objects labelled report contributors
   * @author Omkar
   */
  contributorsSetHeader(schemaObj) {
    const contributorsItems = schemaObj.items;
    if (contributorsItems && contributorsItems.length) {
      contributorsItems.forEach((contItem) => {
        const fieldName = contItem.field_name;
        const mailName = contItem.mail_name;
        if (typeof fieldName === 'string' && typeof mailName === 'string') {
          this.headers.heading_contributors[fieldName] = mailName;
        }
      });
    }
  }
}

module.exports = AssetReportSchema;
